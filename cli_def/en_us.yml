name: ruzip
version: "0.1.0"
author: David Bonet <dbmontes@gmail.com>, Lachezar Lechev <>
about: Rust implementation of unzip
args:
    - files:
        required: true
        index: 1
        help: File path to decompress. It supports RegExp
        long_help: 'Path of the ZIP archive(s). If the file specification is a
        wildcard, each matching file is processed in an order determined by
        the operating system (or file system). Only the filename can be a wildcard;
        the path itself cannot. Wildcard expressions are similar to those supported
        in commonly used Unix shells (sh, ksh, csh) and may contain:


        * matches a sequence of 0 or more characters


        ? matches exactly 1 character


        [...] matches any single character found inside the brackets; ranges
            are specified by a beginning character, a hyphen, and an ending character.
            If an exclamation point or a caret ("!" or "^") follows the left bracket,
            then the range of characters within the brackets is complemented (that is,
            anything except the characters inside the brackets is considered a match).
            To specify a verbatim left bracket, the three-character sequence "[[]"
            has to be used.


        (Be sure to quote any character that might otherwise be interpreted or
        modified by the operating system, particularly under Unix and VMS.) If
        no matches are found, the specification is assumed to be a literal filename;
        and if that also fails, the suffix .zip is appended. Note that self-extracting
        ZIP files are supported, as with any other ZIP archive; just specify the
        .exe suffix (if any) explicitly.


        (VMS versions compiled with VMSCLI defined
        must delimit files with commas instead. See -v in OPTIONS below.)
        Regular expressions (wildcards) may be used to match multiple members;
        see above. Again, be sure to quote expressions that would otherwise be
        expanded or modified by the operating system.'
    - exclude_files:
        short: x
        value_name: EXLUDE_FILES
        min_values: 1
        multiple: true
        help: File/s path to ignore. It supports RegExp.
        long_help: 'An optional list of archive members to be excluded from processing.
        Since wildcard characters normally match ("/") directory separators (for
        exceptions see the option -W), this option may be used to exclude any files that
        are in subdirectories. For example, "unzip foo *.[ch] -x */*" would extract
        all C source files in the main directory, but none in any subdirectories.
        Without the -x option, all C source files in all directories within the zipfile
        would be extracted.'
    - extract_directory:
        short: d
        value_name: EXTRACT_DIRECTORY
        min_values: 1
        help: Directory where to extract the files. Local directory used if not provided.
        long_help: 'An optional directory to which to extract files. By default, all
        files and subdirectories are recreated in the current directory; the -d option
        allows extraction in an arbitrary directory (always assuming one has permission
        to write to the directory). This option need not appear at the end of the command
        line; it is also accepted before the zipfile specification (with the normal options),
        immediately after the zipfile specification, or between the file(s) and the -x option.
        The option and directory may be concatenated without any white space between them,
        but note that this may cause normal shell behavior to be suppressed. In particular,
        "-d ~" (tilde) is expanded by Unix C shells into the name of the user"s home
        directory, but "-d~" is treated as a literal subdirectory "~" of the current directory.'
    - list_archives:
        short: l
        value_name: LIST_ARCHIVES
        help: List archive files (short format).
        long_help: 'list archive files (short format). The names, uncompressed file sizes
        and modification dates and times of the specified files are printed, along with
        totals for all files specified. If UnZip was compiled with OS2_EAS defined, the -l
        option also lists columns for the sizes of stored OS/2 extended attributes (EAs)
        and OS/2 access control lists (ACLs). In addition, the zipfile comment and individual
        file comments (if any) are displayed. If a file was archived from a single-case file
        system (for example, the old MS-DOS FAT file system) and the -L option was given,
        the filename is converted to lowercase and is prefixed with a caret (^)'
    - extrat_to_pipe:
        short: p
        value_name: EXTRAT_TO_PIPE
        help: Extract files to pipe (stdout).
        long_help: 'extract files to pipe (stdout). Nothing but the file data is sent to stdout,
        and the files are always extracted in binary format, just as they are stored (no conversions).'
    - test_files:
        short: t
        value_name: TEST_FILES
        help: Test archive files.
        long_help: "test archive files. This option extracts each specified file in memory and compares
        the CRC (cyclic redundancy check, an enhanced checksum) of the expanded file with the
        original file's stored CRC value."
    - display_only:
        short: z
        value_name: DISPLAY_ONLY
        help: Display only the archive comment.
    - no_overwrite:
        short: n
        value_name: NO_OVERWRITE
        help: Never overwrite existing files.
        long_help: 'never overwrite existing files. If a file already exists, skip the
        extraction of that file without prompting. By default unzip queries before extracting
        any file that already exists; the user may choose to overwrite only the current file,
        overwrite all files, skip extraction of the current file, skip extraction of all existing
        files, or rename the current file.'
    - overwrite_no_prompt:
        short: o
        value_name: OVERWRITE_NO_PROMPT
        help: Overwrite existing files without prompting.
        long_help: 'overwrite existing files without prompting. This is a dangerous option,
        so use it with care. (It is often used with -f, however, and is the only way to overwrite
        directory EAs under OS/2.)'
    - quiet:
        short: q
        value_name: QUIET
        multiple: true
        max_values: 2
        help: Overwrite existing files without prompting.
        long_help: "perform operations quietly (-qq = even quieter). Ordinarily unzip prints
        the names of the files it's extracting or testing, the extraction methods,
        any file or zipfile comments that may be stored in the archive, and possibly a summary
        when finished with each archive. The -q[q] options suppress the printing of some or
        all of these messages."


# -c (2)
# -f (2)
# -u (2)
# -a (2)
# -C (2)
# -D (2)
# -P (2)
# -j (2)
# -M (2)
# -: (2)
# -^ (2)
# -2 (2)
# -Z (3)
# -T (3)
# -v (3)
# -b (3)
# -b (3)
# -b (3)
# -B (3)
# -E (3)
# -F (3)
# -F (3)
# -i (3)
# -J (3)
# -J (3)
# -K (3)
# -L (3)
# -N (3)
# -s (3)
# -S (3)
# -U (3)
# -V (3)
# -W (3)
# -X (3)
# -Y (3)
# -$ (3)
